//
//  XboxOneUserClient.iig
//  XboxControllerDriver
//
// See the LICENSE.txt file for this sampleâ€™s licensing information.
//
// Abstract:
// An interface for user client communication to the driver.
// Includes a simplistic means of managing driver "licensing" to enable and disable the driver.
//

#ifndef XboxOneUserClient_h
#define XboxOneUserClient_h

#include <Availability.h>
#include <DriverKit/IOService.iig>
#include <DriverKit/IOUserClient.iig>

/// A user client interface to communicate with the Xbox controller driver
///
/// Not strictly necessary for controller operation, but provided as an example for user client communication to a hardware-matched interface.
class XboxOneUserClient: public IOUserClient
{
public:
	virtual bool init(void) override;
	virtual kern_return_t Start(IOService* provider) override;
	virtual kern_return_t Stop(IOService* provider) override;
	virtual void free(void) override;

	void SetInputInterface(IOService* inputInterface) LOCALONLY;
	virtual kern_return_t ExternalMethod(uint64_t selector, IOUserClientMethodArguments* arguments, const IOUserClientMethodDispatch* dispatch, OSObject* target, void* reference) override;

protected:
	static kern_return_t StaticHandleLicensing(OSObject* target, void* reference, IOUserClientMethodArguments* arguments) LOCALONLY;
	kern_return_t HandleLicensing(void* reference, IOUserClientMethodArguments* arguments) LOCALONLY;
};

#endif /* XboxOneUserClient_h */
